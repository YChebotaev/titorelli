// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int         @id @default(autoincrement())
  username              String      @unique
  contacts              UserContact[]
  passwordHash          String
  passwordSalt          String
  sessions              UserSession[]
  consents              UserConsent[]
  resetPasswordRequests UserResetPasswordRequest[]
  accountMembership     AccountMember[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  @@index([username])
  @@index([createdAt])
  @@index([updatedAt])
}

model UserContact {
  id              Int         @id @default(autoincrement())
  // 'email' | 'phone' | 'tg-username' | 'tg-user-id'
  type                  String
  email                 String?
  emailConfirmed        Boolean?
  emailDisposable       Boolean?
  emailCorporate        Boolean?
  phone                 String?
  phoneInvalid          Boolean?
  // 'out-of-service' | 'cant-reach' | 'wrong-person' | 'other:${reason}'
  phoneInvalidReason    String?
  tgUsername            String?
  tgUserId              String?
  user                  User        @relation(fields: [userId], references: [id])
  userId                Int
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  @@index([type])
  @@index([email])
  @@index([createdAt])
  @@index([updatedAt])
}

/*
Todo:
1. Add a job to clean expired user sessions
*/
model UserSession {
  id            Int         @id @default(autoincrement())
  token         String      
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  revoked       Boolean
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([token])
  @@index([userId])
}

model UserConsent {
  id            Int         @id @default(autoincrement())
  // 'terms' | 'pdp' | 'subsc' | 'cookie'
  type          String
  terms         Boolean?
  pdp           Boolean?
  sub           Boolean?
  cookie        Boolean?
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


/*
Add a `AccountDeletionRequest`
or get rid of `UserResetPasswordRequest`
*/
model UserResetPasswordRequest {
  id            Int         @id @default(autoincrement())
  token         String
  expiredAt     DateTime
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([token])
  @@index([userId])
}

/*
When account is deleted,
should be some of backup and restore with all data
processes to be performed by administrator
In case if account deleted maliciously or
in result of tragic coincidence
*/
model Account {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  members       AccountMember[] 
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  @@index([name])
}

/*
Should be viewer role at all?
*/
model AccountMember {
  id            Int         @id @default(autoincrement())
  // 'owner' | 'viewer' | 'editor' | 'invited'
  role          String
  // 'viwer' | 'editor'
  invitedRole   String?
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  account       Account     @relation(fields: [accountId], references: [id])
  accountId     Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([accountId])
}

/*
This model exists ony for edit purposes.

Reading of client data should be
performed in another servcie
*/
model Client {
  id            Int         @id @default(autoincrement())
  secretHash    String
  secretSalt    String
  // 'bot' | 'console'
  role          String
  /* [
    | ':modelId/predict'
    | ':modelId/train'
    | ':modelId/exact_match/train'
    | ':modelId/totems/train'
    | 'cas/train'
    | 'console/clients'
  ] */
  scopes        String  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@index([createdAt])
  @@index([updatedAt])
}
